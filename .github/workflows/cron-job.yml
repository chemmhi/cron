name: Dify Workflow Automation

on:
  schedule:
    # 使用更具体的 cron 表达式，在每小时的第1分钟运行 (UTC时间)
    - cron: '* * * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  call-dify-workflow:
    name: Execute Dify Workflow
    runs-on: ubuntu-latest
    environment: production # 添加环境配置，便于权限管理和部署跟踪
    
    steps:
      # 步骤1: 检出代码（可选，但推荐用于日志记录和版本跟踪）
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # 步骤2: 调用Dify工作流API
      - name: Invoke Dify Workflow
        id: call-api
        run: |
          # 使用jq处理JSON响应（如果需要）
          response=$(curl -s -w "\n%{http_code}" -X POST 'https://api.dify.ai/v1/workflows/run' \
            --header "Authorization: Bearer $API_KEY" \
            --header "Content-Type: application/json" \
            --data-raw '{ 
              "inputs": {}, 
              "response_mode": "streaming", 
              "user": "github-actions-${{ github.run_id }}"
            }')
          
          # 分离HTTP状态码和响应体
          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')
          
          echo "HTTP Status: $http_code"
          echo "Response: $body"
          
          # 检查请求是否成功
          if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
            echo "✅ API call successful"
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "❌ API call failed with status $http_code"
            echo "result=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
        env:
          API_KEY: ${{ secrets.DIFY_API_KEY }} # 使用更具体的密钥名称
          
      # 步骤3: 添加成功通知（可选）
      - name: Notify Success
        if: success()
        run: |
          echo "Dify workflow executed successfully at $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          # 可在此处添加通知逻辑（如Slack、Email等）
          
      # 步骤4: 添加失败通知（可选）
      - name: Notify Failure
        if: failure()
        run: |
          echo "❌ Dify workflow execution failed at $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          # 可在此处添加失败通知逻辑
